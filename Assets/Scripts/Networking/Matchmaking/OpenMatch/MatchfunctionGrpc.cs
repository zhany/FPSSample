// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: matchfunction.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace OpenMatch {
  /// <summary>
  /// This proto defines the API for running Match Functions as long-lived,
  /// 'serving' functions.
  /// </summary>
  public static partial class MatchFunction
  {
    static readonly string __ServiceName = "openmatch.MatchFunction";

    static readonly grpc::Marshaller<global::OpenMatch.RunRequest> __Marshaller_openmatch_RunRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.RunRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenMatch.RunResponse> __Marshaller_openmatch_RunResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.RunResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::OpenMatch.RunRequest, global::OpenMatch.RunResponse> __Method_Run = new grpc::Method<global::OpenMatch.RunRequest, global::OpenMatch.RunResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Run",
        __Marshaller_openmatch_RunRequest,
        __Marshaller_openmatch_RunResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::OpenMatch.MatchfunctionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MatchFunction</summary>
    [grpc::BindServiceMethod(typeof(MatchFunction), "BindService")]
    public abstract partial class MatchFunctionBase
    {
      /// <summary>
      /// This is the function that is executed when by the Open Match backend to
      /// generate Match proposals.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Run(global::OpenMatch.RunRequest request, grpc::IServerStreamWriter<global::OpenMatch.RunResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MatchFunction</summary>
    public partial class MatchFunctionClient : grpc::ClientBase<MatchFunctionClient>
    {
      /// <summary>Creates a new client for MatchFunction</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MatchFunctionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MatchFunction that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MatchFunctionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MatchFunctionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MatchFunctionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// This is the function that is executed when by the Open Match backend to
      /// generate Match proposals.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::OpenMatch.RunResponse> Run(global::OpenMatch.RunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Run(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is the function that is executed when by the Open Match backend to
      /// generate Match proposals.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::OpenMatch.RunResponse> Run(global::OpenMatch.RunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Run, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MatchFunctionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MatchFunctionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MatchFunctionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Run, serviceImpl.Run).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MatchFunctionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Run, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::OpenMatch.RunRequest, global::OpenMatch.RunResponse>(serviceImpl.Run));
    }

  }
}
#endregion
