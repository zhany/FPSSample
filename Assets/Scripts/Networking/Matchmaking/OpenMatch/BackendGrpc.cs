// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: backend.proto
// </auto-generated>
// Original file comments:
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Api {
  /// <summary>
  /// Calls to ask the matchmaker to run a matchmaking function.
  /// </summary>
  public static partial class Backend
  {
    static readonly string __ServiceName = "api.Backend";

    static readonly grpc::Marshaller<global::Api.CreateMatchRequest> __Marshaller_api_CreateMatchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.CreateMatchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.CreateMatchResponse> __Marshaller_api_CreateMatchResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.CreateMatchResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.ListMatchesRequest> __Marshaller_api_ListMatchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.ListMatchesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.ListMatchesResponse> __Marshaller_api_ListMatchesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.ListMatchesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.DeleteMatchRequest> __Marshaller_api_DeleteMatchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.DeleteMatchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.DeleteMatchResponse> __Marshaller_api_DeleteMatchResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.DeleteMatchResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.CreateAssignmentsRequest> __Marshaller_api_CreateAssignmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.CreateAssignmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.CreateAssignmentsResponse> __Marshaller_api_CreateAssignmentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.CreateAssignmentsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.DeleteAssignmentsRequest> __Marshaller_api_DeleteAssignmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.DeleteAssignmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Api.DeleteAssignmentsResponse> __Marshaller_api_DeleteAssignmentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Api.DeleteAssignmentsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Api.CreateMatchRequest, global::Api.CreateMatchResponse> __Method_CreateMatch = new grpc::Method<global::Api.CreateMatchRequest, global::Api.CreateMatchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMatch",
        __Marshaller_api_CreateMatchRequest,
        __Marshaller_api_CreateMatchResponse);

    static readonly grpc::Method<global::Api.ListMatchesRequest, global::Api.ListMatchesResponse> __Method_ListMatches = new grpc::Method<global::Api.ListMatchesRequest, global::Api.ListMatchesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListMatches",
        __Marshaller_api_ListMatchesRequest,
        __Marshaller_api_ListMatchesResponse);

    static readonly grpc::Method<global::Api.DeleteMatchRequest, global::Api.DeleteMatchResponse> __Method_DeleteMatch = new grpc::Method<global::Api.DeleteMatchRequest, global::Api.DeleteMatchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMatch",
        __Marshaller_api_DeleteMatchRequest,
        __Marshaller_api_DeleteMatchResponse);

    static readonly grpc::Method<global::Api.CreateAssignmentsRequest, global::Api.CreateAssignmentsResponse> __Method_CreateAssignments = new grpc::Method<global::Api.CreateAssignmentsRequest, global::Api.CreateAssignmentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAssignments",
        __Marshaller_api_CreateAssignmentsRequest,
        __Marshaller_api_CreateAssignmentsResponse);

    static readonly grpc::Method<global::Api.DeleteAssignmentsRequest, global::Api.DeleteAssignmentsResponse> __Method_DeleteAssignments = new grpc::Method<global::Api.DeleteAssignmentsRequest, global::Api.DeleteAssignmentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAssignments",
        __Marshaller_api_DeleteAssignmentsRequest,
        __Marshaller_api_DeleteAssignmentsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Api.BackendReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Backend</summary>
    public abstract partial class BackendBase
    {
      /// <summary>
      /// Run MMF once.  Return a matchobject that fits this profile.
      /// INPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - [optional] roster, any fields you fill are available to your MMF.
      ///  - [optional] pools, any fields you fill are available to your MMF.
      /// OUTPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - error. Empty if no error was encountered
      ///  - rosters, if you choose to fill them in your MMF. (Recommended)
      ///  - pools, if you used the MMLogicAPI in your MMF. (Recommended, and provides stats)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Api.CreateMatchResponse> CreateMatch(global::Api.CreateMatchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Continually run MMF and stream MatchObjects that fit this profile until
      /// the backend client closes the connection.  Same inputs/outputs as CreateMatch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListMatches(global::Api.ListMatchesRequest request, grpc::IServerStreamWriter<global::Api.ListMatchesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a MatchObject from state storage manually. (MatchObjects in state
      /// storage will also automatically expire after a while, defined in the config)
      /// INPUT: MatchObject message with the 'id' field populated.
      /// (All other fields are ignored.)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Api.DeleteMatchResponse> DeleteMatch(global::Api.DeleteMatchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Write the connection info for the list of players in the
      /// Assignments.messages.Rosters to state storage.  The Frontend API is
      /// responsible for sending anything sent here to the game clients.
      /// Sending a player to this function kicks off a process that removes
      /// the player from future matchmaking functions by adding them to the
      /// 'deindexed' player list and then deleting their player ID from state storage
      /// indexes.
      /// INPUT: Assignments message with these fields populated:
      ///  - assignment, anything you write to this string is sent to Frontend API
      ///  - rosters. You can send any number of rosters, containing any number of
      ///     player messages. All players from all rosters will be sent the assignment.
      ///     The only field in the Roster's Player messages used by CreateAssignments is
      ///     the id field.  All other fields in the Player messages are silently ignored.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Api.CreateAssignmentsResponse> CreateAssignments(global::Api.CreateAssignmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove DGS connection info from state storage for players.
      /// INPUT: Roster message with the 'players' field populated.
      ///    The only field in the Roster's Player messages used by
      ///    DeleteAssignments is the 'id' field.  All others are silently ignored.  If
      ///    you need to delete multiple rosters, make multiple calls.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Api.DeleteAssignmentsResponse> DeleteAssignments(global::Api.DeleteAssignmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Backend</summary>
    public partial class BackendClient : grpc::ClientBase<BackendClient>
    {
      /// <summary>Creates a new client for Backend</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BackendClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Backend that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BackendClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BackendClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BackendClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Run MMF once.  Return a matchobject that fits this profile.
      /// INPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - [optional] roster, any fields you fill are available to your MMF.
      ///  - [optional] pools, any fields you fill are available to your MMF.
      /// OUTPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - error. Empty if no error was encountered
      ///  - rosters, if you choose to fill them in your MMF. (Recommended)
      ///  - pools, if you used the MMLogicAPI in your MMF. (Recommended, and provides stats)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Api.CreateMatchResponse CreateMatch(global::Api.CreateMatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run MMF once.  Return a matchobject that fits this profile.
      /// INPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - [optional] roster, any fields you fill are available to your MMF.
      ///  - [optional] pools, any fields you fill are available to your MMF.
      /// OUTPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - error. Empty if no error was encountered
      ///  - rosters, if you choose to fill them in your MMF. (Recommended)
      ///  - pools, if you used the MMLogicAPI in your MMF. (Recommended, and provides stats)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Api.CreateMatchResponse CreateMatch(global::Api.CreateMatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMatch, null, options, request);
      }
      /// <summary>
      /// Run MMF once.  Return a matchobject that fits this profile.
      /// INPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - [optional] roster, any fields you fill are available to your MMF.
      ///  - [optional] pools, any fields you fill are available to your MMF.
      /// OUTPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - error. Empty if no error was encountered
      ///  - rosters, if you choose to fill them in your MMF. (Recommended)
      ///  - pools, if you used the MMLogicAPI in your MMF. (Recommended, and provides stats)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Api.CreateMatchResponse> CreateMatchAsync(global::Api.CreateMatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run MMF once.  Return a matchobject that fits this profile.
      /// INPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - [optional] roster, any fields you fill are available to your MMF.
      ///  - [optional] pools, any fields you fill are available to your MMF.
      /// OUTPUT: MatchObject message with these fields populated:
      ///  - id
      ///  - properties
      ///  - error. Empty if no error was encountered
      ///  - rosters, if you choose to fill them in your MMF. (Recommended)
      ///  - pools, if you used the MMLogicAPI in your MMF. (Recommended, and provides stats)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Api.CreateMatchResponse> CreateMatchAsync(global::Api.CreateMatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMatch, null, options, request);
      }
      /// <summary>
      /// Continually run MMF and stream MatchObjects that fit this profile until
      /// the backend client closes the connection.  Same inputs/outputs as CreateMatch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Api.ListMatchesResponse> ListMatches(global::Api.ListMatchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMatches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Continually run MMF and stream MatchObjects that fit this profile until
      /// the backend client closes the connection.  Same inputs/outputs as CreateMatch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Api.ListMatchesResponse> ListMatches(global::Api.ListMatchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListMatches, null, options, request);
      }
      /// <summary>
      /// Delete a MatchObject from state storage manually. (MatchObjects in state
      /// storage will also automatically expire after a while, defined in the config)
      /// INPUT: MatchObject message with the 'id' field populated.
      /// (All other fields are ignored.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Api.DeleteMatchResponse DeleteMatch(global::Api.DeleteMatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a MatchObject from state storage manually. (MatchObjects in state
      /// storage will also automatically expire after a while, defined in the config)
      /// INPUT: MatchObject message with the 'id' field populated.
      /// (All other fields are ignored.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Api.DeleteMatchResponse DeleteMatch(global::Api.DeleteMatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMatch, null, options, request);
      }
      /// <summary>
      /// Delete a MatchObject from state storage manually. (MatchObjects in state
      /// storage will also automatically expire after a while, defined in the config)
      /// INPUT: MatchObject message with the 'id' field populated.
      /// (All other fields are ignored.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Api.DeleteMatchResponse> DeleteMatchAsync(global::Api.DeleteMatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a MatchObject from state storage manually. (MatchObjects in state
      /// storage will also automatically expire after a while, defined in the config)
      /// INPUT: MatchObject message with the 'id' field populated.
      /// (All other fields are ignored.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Api.DeleteMatchResponse> DeleteMatchAsync(global::Api.DeleteMatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMatch, null, options, request);
      }
      /// <summary>
      /// Write the connection info for the list of players in the
      /// Assignments.messages.Rosters to state storage.  The Frontend API is
      /// responsible for sending anything sent here to the game clients.
      /// Sending a player to this function kicks off a process that removes
      /// the player from future matchmaking functions by adding them to the
      /// 'deindexed' player list and then deleting their player ID from state storage
      /// indexes.
      /// INPUT: Assignments message with these fields populated:
      ///  - assignment, anything you write to this string is sent to Frontend API
      ///  - rosters. You can send any number of rosters, containing any number of
      ///     player messages. All players from all rosters will be sent the assignment.
      ///     The only field in the Roster's Player messages used by CreateAssignments is
      ///     the id field.  All other fields in the Player messages are silently ignored.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Api.CreateAssignmentsResponse CreateAssignments(global::Api.CreateAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Write the connection info for the list of players in the
      /// Assignments.messages.Rosters to state storage.  The Frontend API is
      /// responsible for sending anything sent here to the game clients.
      /// Sending a player to this function kicks off a process that removes
      /// the player from future matchmaking functions by adding them to the
      /// 'deindexed' player list and then deleting their player ID from state storage
      /// indexes.
      /// INPUT: Assignments message with these fields populated:
      ///  - assignment, anything you write to this string is sent to Frontend API
      ///  - rosters. You can send any number of rosters, containing any number of
      ///     player messages. All players from all rosters will be sent the assignment.
      ///     The only field in the Roster's Player messages used by CreateAssignments is
      ///     the id field.  All other fields in the Player messages are silently ignored.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Api.CreateAssignmentsResponse CreateAssignments(global::Api.CreateAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAssignments, null, options, request);
      }
      /// <summary>
      /// Write the connection info for the list of players in the
      /// Assignments.messages.Rosters to state storage.  The Frontend API is
      /// responsible for sending anything sent here to the game clients.
      /// Sending a player to this function kicks off a process that removes
      /// the player from future matchmaking functions by adding them to the
      /// 'deindexed' player list and then deleting their player ID from state storage
      /// indexes.
      /// INPUT: Assignments message with these fields populated:
      ///  - assignment, anything you write to this string is sent to Frontend API
      ///  - rosters. You can send any number of rosters, containing any number of
      ///     player messages. All players from all rosters will be sent the assignment.
      ///     The only field in the Roster's Player messages used by CreateAssignments is
      ///     the id field.  All other fields in the Player messages are silently ignored.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Api.CreateAssignmentsResponse> CreateAssignmentsAsync(global::Api.CreateAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssignmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Write the connection info for the list of players in the
      /// Assignments.messages.Rosters to state storage.  The Frontend API is
      /// responsible for sending anything sent here to the game clients.
      /// Sending a player to this function kicks off a process that removes
      /// the player from future matchmaking functions by adding them to the
      /// 'deindexed' player list and then deleting their player ID from state storage
      /// indexes.
      /// INPUT: Assignments message with these fields populated:
      ///  - assignment, anything you write to this string is sent to Frontend API
      ///  - rosters. You can send any number of rosters, containing any number of
      ///     player messages. All players from all rosters will be sent the assignment.
      ///     The only field in the Roster's Player messages used by CreateAssignments is
      ///     the id field.  All other fields in the Player messages are silently ignored.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Api.CreateAssignmentsResponse> CreateAssignmentsAsync(global::Api.CreateAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAssignments, null, options, request);
      }
      /// <summary>
      /// Remove DGS connection info from state storage for players.
      /// INPUT: Roster message with the 'players' field populated.
      ///    The only field in the Roster's Player messages used by
      ///    DeleteAssignments is the 'id' field.  All others are silently ignored.  If
      ///    you need to delete multiple rosters, make multiple calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Api.DeleteAssignmentsResponse DeleteAssignments(global::Api.DeleteAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove DGS connection info from state storage for players.
      /// INPUT: Roster message with the 'players' field populated.
      ///    The only field in the Roster's Player messages used by
      ///    DeleteAssignments is the 'id' field.  All others are silently ignored.  If
      ///    you need to delete multiple rosters, make multiple calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Api.DeleteAssignmentsResponse DeleteAssignments(global::Api.DeleteAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAssignments, null, options, request);
      }
      /// <summary>
      /// Remove DGS connection info from state storage for players.
      /// INPUT: Roster message with the 'players' field populated.
      ///    The only field in the Roster's Player messages used by
      ///    DeleteAssignments is the 'id' field.  All others are silently ignored.  If
      ///    you need to delete multiple rosters, make multiple calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Api.DeleteAssignmentsResponse> DeleteAssignmentsAsync(global::Api.DeleteAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAssignmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove DGS connection info from state storage for players.
      /// INPUT: Roster message with the 'players' field populated.
      ///    The only field in the Roster's Player messages used by
      ///    DeleteAssignments is the 'id' field.  All others are silently ignored.  If
      ///    you need to delete multiple rosters, make multiple calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Api.DeleteAssignmentsResponse> DeleteAssignmentsAsync(global::Api.DeleteAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAssignments, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BackendClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BackendClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BackendBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateMatch, serviceImpl.CreateMatch)
          .AddMethod(__Method_ListMatches, serviceImpl.ListMatches)
          .AddMethod(__Method_DeleteMatch, serviceImpl.DeleteMatch)
          .AddMethod(__Method_CreateAssignments, serviceImpl.CreateAssignments)
          .AddMethod(__Method_DeleteAssignments, serviceImpl.DeleteAssignments).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BackendBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateMatch, serviceImpl.CreateMatch);
      serviceBinder.AddMethod(__Method_ListMatches, serviceImpl.ListMatches);
      serviceBinder.AddMethod(__Method_DeleteMatch, serviceImpl.DeleteMatch);
      serviceBinder.AddMethod(__Method_CreateAssignments, serviceImpl.CreateAssignments);
      serviceBinder.AddMethod(__Method_DeleteAssignments, serviceImpl.DeleteAssignments);
    }

  }
}
#endregion
