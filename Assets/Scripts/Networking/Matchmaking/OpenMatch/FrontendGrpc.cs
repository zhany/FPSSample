// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: frontend.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace OpenMatch {
  /// <summary>
  /// The Frontend service enables creating Tickets for matchmaking and fetching
  /// the status of these Tickets.
  /// </summary>
  public static partial class Frontend
  {
    static readonly string __ServiceName = "openmatch.Frontend";

    static readonly grpc::Marshaller<global::OpenMatch.CreateTicketRequest> __Marshaller_openmatch_CreateTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.CreateTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenMatch.CreateTicketResponse> __Marshaller_openmatch_CreateTicketResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.CreateTicketResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenMatch.DeleteTicketRequest> __Marshaller_openmatch_DeleteTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.DeleteTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenMatch.DeleteTicketResponse> __Marshaller_openmatch_DeleteTicketResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.DeleteTicketResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenMatch.GetTicketRequest> __Marshaller_openmatch_GetTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.GetTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenMatch.Ticket> __Marshaller_openmatch_Ticket = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.Ticket.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenMatch.GetAssignmentsRequest> __Marshaller_openmatch_GetAssignmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.GetAssignmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenMatch.GetAssignmentsResponse> __Marshaller_openmatch_GetAssignmentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenMatch.GetAssignmentsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::OpenMatch.CreateTicketRequest, global::OpenMatch.CreateTicketResponse> __Method_CreateTicket = new grpc::Method<global::OpenMatch.CreateTicketRequest, global::OpenMatch.CreateTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTicket",
        __Marshaller_openmatch_CreateTicketRequest,
        __Marshaller_openmatch_CreateTicketResponse);

    static readonly grpc::Method<global::OpenMatch.DeleteTicketRequest, global::OpenMatch.DeleteTicketResponse> __Method_DeleteTicket = new grpc::Method<global::OpenMatch.DeleteTicketRequest, global::OpenMatch.DeleteTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTicket",
        __Marshaller_openmatch_DeleteTicketRequest,
        __Marshaller_openmatch_DeleteTicketResponse);

    static readonly grpc::Method<global::OpenMatch.GetTicketRequest, global::OpenMatch.Ticket> __Method_GetTicket = new grpc::Method<global::OpenMatch.GetTicketRequest, global::OpenMatch.Ticket>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTicket",
        __Marshaller_openmatch_GetTicketRequest,
        __Marshaller_openmatch_Ticket);

    static readonly grpc::Method<global::OpenMatch.GetAssignmentsRequest, global::OpenMatch.GetAssignmentsResponse> __Method_GetAssignments = new grpc::Method<global::OpenMatch.GetAssignmentsRequest, global::OpenMatch.GetAssignmentsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAssignments",
        __Marshaller_openmatch_GetAssignmentsRequest,
        __Marshaller_openmatch_GetAssignmentsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::OpenMatch.FrontendReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Frontend</summary>
    [grpc::BindServiceMethod(typeof(Frontend), "BindService")]
    public abstract partial class FrontendBase
    {
      /// <summary>
      /// CreateTicket will create a new ticket, assign a Ticket ID to it and put the
      /// Ticket in state storage. It will then look through the 'properties' field
      /// for the attributes defined as indices the matchmakaking config. If the
      /// attributes exist and are valid integers, they will be indexed. Creating a
      /// ticket adds the Ticket to the pool of Tickets considered for matchmaking.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::OpenMatch.CreateTicketResponse> CreateTicket(global::OpenMatch.CreateTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteTicket removes the Ticket from state storage and from corresponding
      /// configured indices and lazily removes the ticket from state storage.
      /// Deleting a ticket immediately stops the ticket from being
      /// considered for future matchmaking requests, yet when the ticket itself will be deleted
      /// is undeterministic. Users may still be able to assign/get a ticket after calling DeleteTicket on it.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::OpenMatch.DeleteTicketResponse> DeleteTicket(global::OpenMatch.DeleteTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetTicket fetches the ticket associated with the specified Ticket ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::OpenMatch.Ticket> GetTicket(global::OpenMatch.GetTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetAssignments streams matchmaking results from Open Match for the
      /// provided Ticket ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetAssignments(global::OpenMatch.GetAssignmentsRequest request, grpc::IServerStreamWriter<global::OpenMatch.GetAssignmentsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Frontend</summary>
    public partial class FrontendClient : grpc::ClientBase<FrontendClient>
    {
      /// <summary>Creates a new client for Frontend</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FrontendClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Frontend that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FrontendClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FrontendClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FrontendClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreateTicket will create a new ticket, assign a Ticket ID to it and put the
      /// Ticket in state storage. It will then look through the 'properties' field
      /// for the attributes defined as indices the matchmakaking config. If the
      /// attributes exist and are valid integers, they will be indexed. Creating a
      /// ticket adds the Ticket to the pool of Tickets considered for matchmaking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OpenMatch.CreateTicketResponse CreateTicket(global::OpenMatch.CreateTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateTicket will create a new ticket, assign a Ticket ID to it and put the
      /// Ticket in state storage. It will then look through the 'properties' field
      /// for the attributes defined as indices the matchmakaking config. If the
      /// attributes exist and are valid integers, they will be indexed. Creating a
      /// ticket adds the Ticket to the pool of Tickets considered for matchmaking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OpenMatch.CreateTicketResponse CreateTicket(global::OpenMatch.CreateTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTicket, null, options, request);
      }
      /// <summary>
      /// CreateTicket will create a new ticket, assign a Ticket ID to it and put the
      /// Ticket in state storage. It will then look through the 'properties' field
      /// for the attributes defined as indices the matchmakaking config. If the
      /// attributes exist and are valid integers, they will be indexed. Creating a
      /// ticket adds the Ticket to the pool of Tickets considered for matchmaking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.CreateTicketResponse> CreateTicketAsync(global::OpenMatch.CreateTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateTicket will create a new ticket, assign a Ticket ID to it and put the
      /// Ticket in state storage. It will then look through the 'properties' field
      /// for the attributes defined as indices the matchmakaking config. If the
      /// attributes exist and are valid integers, they will be indexed. Creating a
      /// ticket adds the Ticket to the pool of Tickets considered for matchmaking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.CreateTicketResponse> CreateTicketAsync(global::OpenMatch.CreateTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTicket, null, options, request);
      }
      /// <summary>
      /// DeleteTicket removes the Ticket from state storage and from corresponding
      /// configured indices and lazily removes the ticket from state storage.
      /// Deleting a ticket immediately stops the ticket from being
      /// considered for future matchmaking requests, yet when the ticket itself will be deleted
      /// is undeterministic. Users may still be able to assign/get a ticket after calling DeleteTicket on it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OpenMatch.DeleteTicketResponse DeleteTicket(global::OpenMatch.DeleteTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteTicket removes the Ticket from state storage and from corresponding
      /// configured indices and lazily removes the ticket from state storage.
      /// Deleting a ticket immediately stops the ticket from being
      /// considered for future matchmaking requests, yet when the ticket itself will be deleted
      /// is undeterministic. Users may still be able to assign/get a ticket after calling DeleteTicket on it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OpenMatch.DeleteTicketResponse DeleteTicket(global::OpenMatch.DeleteTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTicket, null, options, request);
      }
      /// <summary>
      /// DeleteTicket removes the Ticket from state storage and from corresponding
      /// configured indices and lazily removes the ticket from state storage.
      /// Deleting a ticket immediately stops the ticket from being
      /// considered for future matchmaking requests, yet when the ticket itself will be deleted
      /// is undeterministic. Users may still be able to assign/get a ticket after calling DeleteTicket on it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.DeleteTicketResponse> DeleteTicketAsync(global::OpenMatch.DeleteTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteTicket removes the Ticket from state storage and from corresponding
      /// configured indices and lazily removes the ticket from state storage.
      /// Deleting a ticket immediately stops the ticket from being
      /// considered for future matchmaking requests, yet when the ticket itself will be deleted
      /// is undeterministic. Users may still be able to assign/get a ticket after calling DeleteTicket on it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.DeleteTicketResponse> DeleteTicketAsync(global::OpenMatch.DeleteTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTicket, null, options, request);
      }
      /// <summary>
      /// GetTicket fetches the ticket associated with the specified Ticket ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OpenMatch.Ticket GetTicket(global::OpenMatch.GetTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTicket fetches the ticket associated with the specified Ticket ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OpenMatch.Ticket GetTicket(global::OpenMatch.GetTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTicket, null, options, request);
      }
      /// <summary>
      /// GetTicket fetches the ticket associated with the specified Ticket ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Ticket> GetTicketAsync(global::OpenMatch.GetTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTicket fetches the ticket associated with the specified Ticket ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Ticket> GetTicketAsync(global::OpenMatch.GetTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTicket, null, options, request);
      }
      /// <summary>
      /// GetAssignments streams matchmaking results from Open Match for the
      /// provided Ticket ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::OpenMatch.GetAssignmentsResponse> GetAssignments(global::OpenMatch.GetAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAssignments streams matchmaking results from Open Match for the
      /// provided Ticket ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::OpenMatch.GetAssignmentsResponse> GetAssignments(global::OpenMatch.GetAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAssignments, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FrontendClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FrontendClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FrontendBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTicket, serviceImpl.CreateTicket)
          .AddMethod(__Method_DeleteTicket, serviceImpl.DeleteTicket)
          .AddMethod(__Method_GetTicket, serviceImpl.GetTicket)
          .AddMethod(__Method_GetAssignments, serviceImpl.GetAssignments).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FrontendBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OpenMatch.CreateTicketRequest, global::OpenMatch.CreateTicketResponse>(serviceImpl.CreateTicket));
      serviceBinder.AddMethod(__Method_DeleteTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OpenMatch.DeleteTicketRequest, global::OpenMatch.DeleteTicketResponse>(serviceImpl.DeleteTicket));
      serviceBinder.AddMethod(__Method_GetTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OpenMatch.GetTicketRequest, global::OpenMatch.Ticket>(serviceImpl.GetTicket));
      serviceBinder.AddMethod(__Method_GetAssignments, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::OpenMatch.GetAssignmentsRequest, global::OpenMatch.GetAssignmentsResponse>(serviceImpl.GetAssignments));
    }

  }
}
#endregion
