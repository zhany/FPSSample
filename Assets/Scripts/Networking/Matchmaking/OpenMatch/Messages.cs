// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenMatch {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIJb3Blbm1hdGNoGhdnb29nbGUvcnBjL3N0YXR1",
            "cy5wcm90bxocZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90byJsCgZUaWNr",
            "ZXQSCgoCaWQYASABKAkSKwoKcHJvcGVydGllcxgCIAEoCzIXLmdvb2dsZS5w",
            "cm90b2J1Zi5TdHJ1Y3QSKQoKYXNzaWdubWVudBgDIAEoCzIVLm9wZW5tYXRj",
            "aC5Bc3NpZ25tZW50InAKCkFzc2lnbm1lbnQSEgoKY29ubmVjdGlvbhgBIAEo",
            "CRIrCgpwcm9wZXJ0aWVzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVj",
            "dBIhCgVlcnJvchgDIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzIj8KEEZsb2F0",
            "UmFuZ2VGaWx0ZXISEQoJYXR0cmlidXRlGAEgASgJEgsKA21heBgCIAEoARIL",
            "CgNtaW4YAyABKAEiNAoQQm9vbEVxdWFsc0ZpbHRlchIRCglhdHRyaWJ1dGUY",
            "ASABKAkSDQoFdmFsdWUYAiABKAgiNgoSU3RyaW5nRXF1YWxzRmlsdGVyEhEK",
            "CWF0dHJpYnV0ZRgBIAEoCRINCgV2YWx1ZRgCIAEoCSLGAQoEUG9vbBIMCgRu",
            "YW1lGAEgASgJEjgKE2Zsb2F0X3JhbmdlX2ZpbHRlcnMYAiADKAsyGy5vcGVu",
            "bWF0Y2guRmxvYXRSYW5nZUZpbHRlchI4ChNib29sX2VxdWFsc19maWx0ZXJz",
            "GAMgAygLMhsub3Blbm1hdGNoLkJvb2xFcXVhbHNGaWx0ZXISPAoVc3RyaW5n",
            "X2VxdWFsc19maWx0ZXJzGAQgAygLMh0ub3Blbm1hdGNoLlN0cmluZ0VxdWFs",
            "c0ZpbHRlciIqCgZSb3N0ZXISDAoEbmFtZRgBIAEoCRISCgp0aWNrZXRfaWRz",
            "GAIgAygJIo0BCgxNYXRjaFByb2ZpbGUSDAoEbmFtZRgBIAEoCRIrCgpwcm9w",
            "ZXJ0aWVzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdBIeCgVwb29s",
            "cxgDIAMoCzIPLm9wZW5tYXRjaC5Qb29sEiIKB3Jvc3RlcnMYBCADKAsyES5v",
            "cGVubWF0Y2guUm9zdGVyIr0BCgVNYXRjaBIQCghtYXRjaF9pZBgBIAEoCRIV",
            "Cg1tYXRjaF9wcm9maWxlGAIgASgJEhYKDm1hdGNoX2Z1bmN0aW9uGAMgASgJ",
            "EiIKB3RpY2tldHMYBCADKAsyES5vcGVubWF0Y2guVGlja2V0EiIKB3Jvc3Rl",
            "cnMYBSADKAsyES5vcGVubWF0Y2guUm9zdGVyEisKCnByb3BlcnRpZXMYBiAB",
            "KAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qi5aIG9wZW4tbWF0Y2guZGV2",
            "L29wZW4tbWF0Y2gvcGtnL3BiqgIJT3Blbk1hdGNoYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Rpc.StatusReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Ticket), global::OpenMatch.Ticket.Parser, new[]{ "Id", "Properties", "Assignment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Assignment), global::OpenMatch.Assignment.Parser, new[]{ "Connection", "Properties", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.FloatRangeFilter), global::OpenMatch.FloatRangeFilter.Parser, new[]{ "Attribute", "Max", "Min" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.BoolEqualsFilter), global::OpenMatch.BoolEqualsFilter.Parser, new[]{ "Attribute", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.StringEqualsFilter), global::OpenMatch.StringEqualsFilter.Parser, new[]{ "Attribute", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Pool), global::OpenMatch.Pool.Parser, new[]{ "Name", "FloatRangeFilters", "BoolEqualsFilters", "StringEqualsFilters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Roster), global::OpenMatch.Roster.Parser, new[]{ "Name", "TicketIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.MatchProfile), global::OpenMatch.MatchProfile.Parser, new[]{ "Name", "Properties", "Pools", "Rosters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Match), global::OpenMatch.Match.Parser, new[]{ "MatchId", "MatchProfile", "MatchFunction", "Tickets", "Rosters", "Properties" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Ticket is a basic matchmaking entity in Open Match. In order to enter
  /// matchmaking using Open Match, the client should generate a Ticket, passing in
  /// the properties to be associated with this Ticket. Open Match will generate an
  /// ID for a Ticket during creation. A Ticket could be used to represent an
  /// individual 'Player' or a 'Group' of players. Open Match will not interpret
  /// what the Ticket represents but just treat it as a matchmaking unit with a set
  /// of properties. Open Match stores the Ticket in state storage and enables an
  /// Assignment to be associated with this Ticket.
  /// </summary>
  public sealed partial class Ticket : pb::IMessage<Ticket> {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      id_ = other.id_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      assignment_ = other.assignment_ != null ? other.assignment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The Ticket ID generated by Open Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Struct properties_;
    /// <summary>
    /// Properties contains custom info about the ticket.  Top level values can be
    /// used in indexing and filtering to find tickets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    /// <summary>Field number for the "assignment" field.</summary>
    public const int AssignmentFieldNumber = 3;
    private global::OpenMatch.Assignment assignment_;
    /// <summary>
    /// Assignment associated with the Ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenMatch.Assignment Assignment {
      get { return assignment_; }
      set {
        assignment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      if (!object.Equals(Assignment, other.Assignment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      if (assignment_ != null) hash ^= Assignment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (properties_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Properties);
      }
      if (assignment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Assignment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      if (assignment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Assignment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Properties.MergeFrom(other.Properties);
      }
      if (other.assignment_ != null) {
        if (assignment_ == null) {
          Assignment = new global::OpenMatch.Assignment();
        }
        Assignment.MergeFrom(other.Assignment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (properties_ == null) {
              Properties = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 26: {
            if (assignment_ == null) {
              Assignment = new global::OpenMatch.Assignment();
            }
            input.ReadMessage(Assignment);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An Assignment object represents the assignment associated with a Ticket. Open
  /// match does not require or inspect any fields on assignment.
  /// </summary>
  public sealed partial class Assignment : pb::IMessage<Assignment> {
    private static readonly pb::MessageParser<Assignment> _parser = new pb::MessageParser<Assignment>(() => new Assignment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Assignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment(Assignment other) : this() {
      connection_ = other.connection_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      error_ = other.error_ != null ? other.error_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment Clone() {
      return new Assignment(this);
    }

    /// <summary>Field number for the "connection" field.</summary>
    public const int ConnectionFieldNumber = 1;
    private string connection_ = "";
    /// <summary>
    /// Connection information for this Assignment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Connection {
      get { return connection_; }
      set {
        connection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Struct properties_;
    /// <summary>
    /// Other details to be sent to the players.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::Google.Rpc.Status error_;
    /// <summary>
    /// Error when finding an Assignment for this Ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Assignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Assignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connection != other.Connection) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connection.Length != 0) hash ^= Connection.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Connection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Connection);
      }
      if (properties_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Properties);
      }
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Connection);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Assignment other) {
      if (other == null) {
        return;
      }
      if (other.Connection.Length != 0) {
        Connection = other.Connection;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Properties.MergeFrom(other.Properties);
      }
      if (other.error_ != null) {
        if (error_ == null) {
          Error = new global::Google.Rpc.Status();
        }
        Error.MergeFrom(other.Error);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Connection = input.ReadString();
            break;
          }
          case 18: {
            if (properties_ == null) {
              Properties = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 26: {
            if (error_ == null) {
              Error = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Error);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters numerical values to only those within a range.
  ///   attribute: "foo"
  ///   max: 10
  ///   min: 5
  /// matches:
  ///   {"foo": 5}
  ///   {"foo": 7.5}
  ///   {"foo": 10}
  /// does not match:
  ///   {"foo": 4}
  ///   {"foo": 10.01}
  ///   {"foo": "7.5"}
  ///   {"foo": true}
  ///   {"foo": [7.5]}
  ///   {"foo": null}
  ///   {}
  /// </summary>
  public sealed partial class FloatRangeFilter : pb::IMessage<FloatRangeFilter> {
    private static readonly pb::MessageParser<FloatRangeFilter> _parser = new pb::MessageParser<FloatRangeFilter>(() => new FloatRangeFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FloatRangeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatRangeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatRangeFilter(FloatRangeFilter other) : this() {
      attribute_ = other.attribute_;
      max_ = other.max_;
      min_ = other.min_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatRangeFilter Clone() {
      return new FloatRangeFilter(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private string attribute_ = "";
    /// <summary>
    /// Name of the ticket attribute this Filter operates on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attribute {
      get { return attribute_; }
      set {
        attribute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private double max_;
    /// <summary>
    /// Maximum value. Defaults to positive infinity (any value above minv).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 3;
    private double min_;
    /// <summary>
    /// Minimum value. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FloatRangeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FloatRangeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Attribute != other.Attribute) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Max, other.Max)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Min, other.Min)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Attribute.Length != 0) hash ^= Attribute.GetHashCode();
      if (Max != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Max);
      if (Min != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Min);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Attribute.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Attribute);
      }
      if (Max != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Max);
      }
      if (Min != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Min);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attribute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attribute);
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FloatRangeFilter other) {
      if (other == null) {
        return;
      }
      if (other.Attribute.Length != 0) {
        Attribute = other.Attribute;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Attribute = input.ReadString();
            break;
          }
          case 17: {
            Max = input.ReadDouble();
            break;
          }
          case 25: {
            Min = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters boolean values.
  ///   attribute: "foo"
  ///   value: false
  /// matches:
  ///   {"foo": false}
  /// does not match:
  ///   {"foo": true}
  ///   {"foo": "bar"}
  ///   {"foo": 1}
  ///   {"foo": "false"}
  ///   {"foo": [false]}
  ///   {"foo": null}
  ///   {}
  /// </summary>
  public sealed partial class BoolEqualsFilter : pb::IMessage<BoolEqualsFilter> {
    private static readonly pb::MessageParser<BoolEqualsFilter> _parser = new pb::MessageParser<BoolEqualsFilter>(() => new BoolEqualsFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoolEqualsFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolEqualsFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolEqualsFilter(BoolEqualsFilter other) : this() {
      attribute_ = other.attribute_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolEqualsFilter Clone() {
      return new BoolEqualsFilter(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private string attribute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attribute {
      get { return attribute_; }
      set {
        attribute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoolEqualsFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoolEqualsFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Attribute != other.Attribute) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Attribute.Length != 0) hash ^= Attribute.GetHashCode();
      if (Value != false) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Attribute.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Attribute);
      }
      if (Value != false) {
        output.WriteRawTag(16);
        output.WriteBool(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attribute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attribute);
      }
      if (Value != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoolEqualsFilter other) {
      if (other == null) {
        return;
      }
      if (other.Attribute.Length != 0) {
        Attribute = other.Attribute;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Attribute = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters strings exactly equaling a value.
  ///   attribute: "foo"
  ///   value: "bar"
  /// matches:
  ///   {"foo": "bar"}
  /// does not match:
  ///   {"foo": "baz"}
  ///   {"foo": true}
  ///   {"foo": 5}
  ///   {"foo": ["bar"]}
  ///   {"foo": null}
  ///   {}
  /// </summary>
  public sealed partial class StringEqualsFilter : pb::IMessage<StringEqualsFilter> {
    private static readonly pb::MessageParser<StringEqualsFilter> _parser = new pb::MessageParser<StringEqualsFilter>(() => new StringEqualsFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringEqualsFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter(StringEqualsFilter other) : this() {
      attribute_ = other.attribute_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter Clone() {
      return new StringEqualsFilter(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private string attribute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attribute {
      get { return attribute_; }
      set {
        attribute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringEqualsFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringEqualsFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Attribute != other.Attribute) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Attribute.Length != 0) hash ^= Attribute.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Attribute.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Attribute);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attribute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attribute);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringEqualsFilter other) {
      if (other == null) {
        return;
      }
      if (other.Attribute.Length != 0) {
        Attribute = other.Attribute;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Attribute = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pool : pb::IMessage<Pool> {
    private static readonly pb::MessageParser<Pool> _parser = new pb::MessageParser<Pool>(() => new Pool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool(Pool other) : this() {
      name_ = other.name_;
      floatRangeFilters_ = other.floatRangeFilters_.Clone();
      boolEqualsFilters_ = other.boolEqualsFilters_.Clone();
      stringEqualsFilters_ = other.stringEqualsFilters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool Clone() {
      return new Pool(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A developer-chosen human-readable name for this Pool.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "float_range_filters" field.</summary>
    public const int FloatRangeFiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::OpenMatch.FloatRangeFilter> _repeated_floatRangeFilters_codec
        = pb::FieldCodec.ForMessage(18, global::OpenMatch.FloatRangeFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.FloatRangeFilter> floatRangeFilters_ = new pbc::RepeatedField<global::OpenMatch.FloatRangeFilter>();
    /// <summary>
    /// Set of Filters indicating the filtering criteria. Selected players must
    /// match every Filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.FloatRangeFilter> FloatRangeFilters {
      get { return floatRangeFilters_; }
    }

    /// <summary>Field number for the "bool_equals_filters" field.</summary>
    public const int BoolEqualsFiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::OpenMatch.BoolEqualsFilter> _repeated_boolEqualsFilters_codec
        = pb::FieldCodec.ForMessage(26, global::OpenMatch.BoolEqualsFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.BoolEqualsFilter> boolEqualsFilters_ = new pbc::RepeatedField<global::OpenMatch.BoolEqualsFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.BoolEqualsFilter> BoolEqualsFilters {
      get { return boolEqualsFilters_; }
    }

    /// <summary>Field number for the "string_equals_filters" field.</summary>
    public const int StringEqualsFiltersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OpenMatch.StringEqualsFilter> _repeated_stringEqualsFilters_codec
        = pb::FieldCodec.ForMessage(34, global::OpenMatch.StringEqualsFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.StringEqualsFilter> stringEqualsFilters_ = new pbc::RepeatedField<global::OpenMatch.StringEqualsFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.StringEqualsFilter> StringEqualsFilters {
      get { return stringEqualsFilters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!floatRangeFilters_.Equals(other.floatRangeFilters_)) return false;
      if(!boolEqualsFilters_.Equals(other.boolEqualsFilters_)) return false;
      if(!stringEqualsFilters_.Equals(other.stringEqualsFilters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= floatRangeFilters_.GetHashCode();
      hash ^= boolEqualsFilters_.GetHashCode();
      hash ^= stringEqualsFilters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      floatRangeFilters_.WriteTo(output, _repeated_floatRangeFilters_codec);
      boolEqualsFilters_.WriteTo(output, _repeated_boolEqualsFilters_codec);
      stringEqualsFilters_.WriteTo(output, _repeated_stringEqualsFilters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += floatRangeFilters_.CalculateSize(_repeated_floatRangeFilters_codec);
      size += boolEqualsFilters_.CalculateSize(_repeated_boolEqualsFilters_codec);
      size += stringEqualsFilters_.CalculateSize(_repeated_stringEqualsFilters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pool other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      floatRangeFilters_.Add(other.floatRangeFilters_);
      boolEqualsFilters_.Add(other.boolEqualsFilters_);
      stringEqualsFilters_.Add(other.stringEqualsFilters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            floatRangeFilters_.AddEntriesFrom(input, _repeated_floatRangeFilters_codec);
            break;
          }
          case 26: {
            boolEqualsFilters_.AddEntriesFrom(input, _repeated_boolEqualsFilters_codec);
            break;
          }
          case 34: {
            stringEqualsFilters_.AddEntriesFrom(input, _repeated_stringEqualsFilters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Roster is a named collection of Ticket IDs. It exists so that a Tickets
  /// associated with a Match can be labelled to belong to a team, sub-team etc. It
  /// can also be used to represent the current state of a Match in scenarios such
  /// as backfill, join-in-progress etc.
  /// </summary>
  public sealed partial class Roster : pb::IMessage<Roster> {
    private static readonly pb::MessageParser<Roster> _parser = new pb::MessageParser<Roster>(() => new Roster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Roster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster(Roster other) : this() {
      name_ = other.name_;
      ticketIds_ = other.ticketIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster Clone() {
      return new Roster(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A developer-chosen human-readable name for this Roster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticket_ids" field.</summary>
    public const int TicketIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_ticketIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> ticketIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tickets belonging to this Roster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TicketIds {
      get { return ticketIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Roster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Roster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!ticketIds_.Equals(other.ticketIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= ticketIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      ticketIds_.WriteTo(output, _repeated_ticketIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += ticketIds_.CalculateSize(_repeated_ticketIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Roster other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      ticketIds_.Add(other.ticketIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ticketIds_.AddEntriesFrom(input, _repeated_ticketIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A MatchProfile is Open Match's representation of a Match specification. It is
  /// used to indicate the criteria for selecting players for a match. A
  /// MatchProfile is the input to the API to get matches and is passed to the
  /// MatchFunction. It contains all the information required by the MatchFunction
  /// to generate match proposals.
  /// </summary>
  public sealed partial class MatchProfile : pb::IMessage<MatchProfile> {
    private static readonly pb::MessageParser<MatchProfile> _parser = new pb::MessageParser<MatchProfile>(() => new MatchProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile(MatchProfile other) : this() {
      name_ = other.name_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      pools_ = other.pools_.Clone();
      rosters_ = other.rosters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile Clone() {
      return new MatchProfile(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of this match profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Struct properties_;
    /// <summary>
    /// Set of properties associated with this MatchProfile. (Optional)
    /// Open Match does not interpret these properties but passes them through to
    /// the MatchFunction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    /// <summary>Field number for the "pools" field.</summary>
    public const int PoolsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::OpenMatch.Pool> _repeated_pools_codec
        = pb::FieldCodec.ForMessage(26, global::OpenMatch.Pool.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Pool> pools_ = new pbc::RepeatedField<global::OpenMatch.Pool>();
    /// <summary>
    /// Set of pools to be queried when generating a match for this MatchProfile.
    /// The pool names can be used in empty Rosters to specify composition of a
    /// match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Pool> Pools {
      get { return pools_; }
    }

    /// <summary>Field number for the "rosters" field.</summary>
    public const int RostersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OpenMatch.Roster> _repeated_rosters_codec
        = pb::FieldCodec.ForMessage(34, global::OpenMatch.Roster.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Roster> rosters_ = new pbc::RepeatedField<global::OpenMatch.Roster>();
    /// <summary>
    /// Set of Rosters for this match request. Could be empty Rosters used to
    /// indicate the composition of the generated Match or they could be partially
    /// pre-populated Ticket list to be used in scenarios such as backfill / join
    /// in progress.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Roster> Rosters {
      get { return rosters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      if(!pools_.Equals(other.pools_)) return false;
      if(!rosters_.Equals(other.rosters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      hash ^= pools_.GetHashCode();
      hash ^= rosters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (properties_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Properties);
      }
      pools_.WriteTo(output, _repeated_pools_codec);
      rosters_.WriteTo(output, _repeated_rosters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      size += pools_.CalculateSize(_repeated_pools_codec);
      size += rosters_.CalculateSize(_repeated_rosters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchProfile other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Properties.MergeFrom(other.Properties);
      }
      pools_.Add(other.pools_);
      rosters_.Add(other.rosters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (properties_ == null) {
              Properties = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 26: {
            pools_.AddEntriesFrom(input, _repeated_pools_codec);
            break;
          }
          case 34: {
            rosters_.AddEntriesFrom(input, _repeated_rosters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Match is used to represent a completed match object. It can be generated by
  /// a MatchFunction as a proposal or can be returned by OpenMatch as a result in
  /// response to the FetchMatches call.
  /// When a match is returned by the FetchMatches call, it should contain at least 
  /// one ticket to be considered as valid.
  /// </summary>
  public sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      matchProfile_ = other.matchProfile_;
      matchFunction_ = other.matchFunction_;
      tickets_ = other.tickets_.Clone();
      rosters_ = other.rosters_.Clone();
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// A Match ID that should be passed through the stack for tracing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_profile" field.</summary>
    public const int MatchProfileFieldNumber = 2;
    private string matchProfile_ = "";
    /// <summary>
    /// Name of the match profile that generated this Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchProfile {
      get { return matchProfile_; }
      set {
        matchProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_function" field.</summary>
    public const int MatchFunctionFieldNumber = 3;
    private string matchFunction_ = "";
    /// <summary>
    /// Name of the match function that generated this Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchFunction {
      get { return matchFunction_; }
      set {
        matchFunction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int TicketsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OpenMatch.Ticket> _repeated_tickets_codec
        = pb::FieldCodec.ForMessage(34, global::OpenMatch.Ticket.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Ticket> tickets_ = new pbc::RepeatedField<global::OpenMatch.Ticket>();
    /// <summary>
    /// Tickets belonging to this match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Ticket> Tickets {
      get { return tickets_; }
    }

    /// <summary>Field number for the "rosters" field.</summary>
    public const int RostersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::OpenMatch.Roster> _repeated_rosters_codec
        = pb::FieldCodec.ForMessage(42, global::OpenMatch.Roster.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Roster> rosters_ = new pbc::RepeatedField<global::OpenMatch.Roster>();
    /// <summary>
    /// Set of Rosters that comprise this Match
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Roster> Rosters {
      get { return rosters_; }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Struct properties_;
    /// <summary>
    /// Match properties for this Match. Open Match does not interpret this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (MatchProfile != other.MatchProfile) return false;
      if (MatchFunction != other.MatchFunction) return false;
      if(!tickets_.Equals(other.tickets_)) return false;
      if(!rosters_.Equals(other.rosters_)) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (MatchProfile.Length != 0) hash ^= MatchProfile.GetHashCode();
      if (MatchFunction.Length != 0) hash ^= MatchFunction.GetHashCode();
      hash ^= tickets_.GetHashCode();
      hash ^= rosters_.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (MatchProfile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchProfile);
      }
      if (MatchFunction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchFunction);
      }
      tickets_.WriteTo(output, _repeated_tickets_codec);
      rosters_.WriteTo(output, _repeated_rosters_codec);
      if (properties_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Properties);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (MatchProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchProfile);
      }
      if (MatchFunction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchFunction);
      }
      size += tickets_.CalculateSize(_repeated_tickets_codec);
      size += rosters_.CalculateSize(_repeated_rosters_codec);
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.MatchProfile.Length != 0) {
        MatchProfile = other.MatchProfile;
      }
      if (other.MatchFunction.Length != 0) {
        MatchFunction = other.MatchFunction;
      }
      tickets_.Add(other.tickets_);
      rosters_.Add(other.rosters_);
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Properties.MergeFrom(other.Properties);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            MatchProfile = input.ReadString();
            break;
          }
          case 26: {
            MatchFunction = input.ReadString();
            break;
          }
          case 34: {
            tickets_.AddEntriesFrom(input, _repeated_tickets_codec);
            break;
          }
          case 42: {
            rosters_.AddEntriesFrom(input, _repeated_rosters_codec);
            break;
          }
          case 50: {
            if (properties_ == null) {
              Properties = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Properties);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
