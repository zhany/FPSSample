// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Messages {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIIbWVzc2FnZXMilAEKC01hdGNoT2JqZWN0EgoK",
            "AmlkGAEgASgJEhIKCnByb3BlcnRpZXMYAiABKAkSDQoFZXJyb3IYAyABKAkS",
            "IQoHcm9zdGVycxgEIAMoCzIQLm1lc3NhZ2VzLlJvc3RlchIjCgVwb29scxgF",
            "IAMoCzIULm1lc3NhZ2VzLlBsYXllclBvb2wSDgoGc3RhdHVzGAYgASgJIjkK",
            "BlJvc3RlchIMCgRuYW1lGAEgASgJEiEKB3BsYXllcnMYAiADKAsyEC5tZXNz",
            "YWdlcy5QbGF5ZXIiZQoGRmlsdGVyEgwKBG5hbWUYASABKAkSEQoJYXR0cmli",
            "dXRlGAIgASgJEgwKBG1heHYYAyABKAMSDAoEbWludhgEIAEoAxIeCgVzdGF0",
            "cxgFIAEoCzIPLm1lc3NhZ2VzLlN0YXRzIicKBVN0YXRzEg0KBWNvdW50GAEg",
            "ASgDEg8KB2VsYXBzZWQYAiABKAEifwoKUGxheWVyUG9vbBIMCgRuYW1lGAEg",
            "ASgJEiEKB2ZpbHRlcnMYAiADKAsyEC5tZXNzYWdlcy5GaWx0ZXISIAoGcm9z",
            "dGVyGAMgASgLMhAubWVzc2FnZXMuUm9zdGVyEh4KBXN0YXRzGAQgASgLMg8u",
            "bWVzc2FnZXMuU3RhdHMiwwEKBlBsYXllchIKCgJpZBgBIAEoCRISCgpwcm9w",
            "ZXJ0aWVzGAIgASgJEgwKBHBvb2wYAyABKAkSLgoKYXR0cmlidXRlcxgEIAMo",
            "CzIaLm1lc3NhZ2VzLlBsYXllci5BdHRyaWJ1dGUSEgoKYXNzaWdubWVudBgF",
            "IAEoCRIOCgZzdGF0dXMYBiABKAkSDQoFZXJyb3IYByABKAkaKAoJQXR0cmli",
            "dXRlEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAMiCQoHSWxJbnB1dCJE",
            "CgtBc3NpZ25tZW50cxIhCgdyb3N0ZXJzGAEgAygLMhAubWVzc2FnZXMuUm9z",
            "dGVyEhIKCmFzc2lnbm1lbnQYCiABKAlCDVoLaW50ZXJuYWwvcGJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.MatchObject), global::Messages.MatchObject.Parser, new[]{ "Id", "Properties", "Error", "Rosters", "Pools", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Roster), global::Messages.Roster.Parser, new[]{ "Name", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Filter), global::Messages.Filter.Parser, new[]{ "Name", "Attribute", "Maxv", "Minv", "Stats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Stats), global::Messages.Stats.Parser, new[]{ "Count", "Elapsed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.PlayerPool), global::Messages.PlayerPool.Parser, new[]{ "Name", "Filters", "Roster", "Stats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Player), global::Messages.Player.Parser, new[]{ "Id", "Properties", "Pool", "Attributes", "Assignment", "Status", "Error" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Player.Types.Attribute), global::Messages.Player.Types.Attribute.Parser, new[]{ "Name", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.IlInput), global::Messages.IlInput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Assignments), global::Messages.Assignments.Parser, new[]{ "Rosters", "Assignment" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Open Match's internal representation and wire protocol format for "MatchObjects".
  /// In order to request a match using the Backend API, your backend code should generate
  /// a new MatchObject with an ID and properties filled in (for more details about valid
  /// values for these fields, see the documentation).  Open Match then sends the Match
  /// Object through to your matchmaking function, where you add players to 'rosters' and
  /// store any schemaless data you wish in the 'properties' field.  The MatchObject
  /// is then sent, populated, out through the Backend API to your backend code.
  ///
  /// MatchObjects contain a number of fields, but many gRPC calls that take a
  /// MatchObject as input only require a few of them to be filled in.  Check the
  /// gRPC function in question for more details.
  /// </summary>
  public sealed partial class MatchObject : pb::IMessage<MatchObject> {
    private static readonly pb::MessageParser<MatchObject> _parser = new pb::MessageParser<MatchObject>(() => new MatchObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchObject(MatchObject other) : this() {
      id_ = other.id_;
      properties_ = other.properties_;
      error_ = other.error_;
      rosters_ = other.rosters_.Clone();
      pools_ = other.pools_.Clone();
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchObject Clone() {
      return new MatchObject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// By convention, an Xid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private string properties_ = "";
    /// <summary>
    /// By convention, a JSON-encoded string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Properties {
      get { return properties_; }
      set {
        properties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    /// Last error encountered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rosters" field.</summary>
    public const int RostersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Messages.Roster> _repeated_rosters_codec
        = pb::FieldCodec.ForMessage(34, global::Messages.Roster.Parser);
    private readonly pbc::RepeatedField<global::Messages.Roster> rosters_ = new pbc::RepeatedField<global::Messages.Roster>();
    /// <summary>
    /// Rosters of players.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Roster> Rosters {
      get { return rosters_; }
    }

    /// <summary>Field number for the "pools" field.</summary>
    public const int PoolsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Messages.PlayerPool> _repeated_pools_codec
        = pb::FieldCodec.ForMessage(42, global::Messages.PlayerPool.Parser);
    private readonly pbc::RepeatedField<global::Messages.PlayerPool> pools_ = new pbc::RepeatedField<global::Messages.PlayerPool>();
    /// <summary>
    /// 'Hard' filters, and the players who match them.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.PlayerPool> Pools {
      get { return pools_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private string status_ = "";
    /// <summary>
    /// Resulting status of the match function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Properties != other.Properties) return false;
      if (Error != other.Error) return false;
      if(!rosters_.Equals(other.rosters_)) return false;
      if(!pools_.Equals(other.pools_)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Properties.Length != 0) hash ^= Properties.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= rosters_.GetHashCode();
      hash ^= pools_.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Properties.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Properties);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      rosters_.WriteTo(output, _repeated_rosters_codec);
      pools_.WriteTo(output, _repeated_pools_codec);
      if (Status.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Properties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Properties);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += rosters_.CalculateSize(_repeated_rosters_codec);
      size += pools_.CalculateSize(_repeated_pools_codec);
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchObject other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Properties.Length != 0) {
        Properties = other.Properties;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      rosters_.Add(other.rosters_);
      pools_.Add(other.pools_);
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Properties = input.ReadString();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
          case 34: {
            rosters_.AddEntriesFrom(input, _repeated_rosters_codec);
            break;
          }
          case 42: {
            pools_.AddEntriesFrom(input, _repeated_pools_codec);
            break;
          }
          case 50: {
            Status = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data structure to hold a list of players in a match.
  /// </summary>
  public sealed partial class Roster : pb::IMessage<Roster> {
    private static readonly pb::MessageParser<Roster> _parser = new pb::MessageParser<Roster>(() => new Roster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Roster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster(Roster other) : this() {
      name_ = other.name_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster Clone() {
      return new Roster(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Arbitrary developer-chosen, human-readable string. By convention, set to team name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Messages.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Messages.Player.Parser);
    private readonly pbc::RepeatedField<global::Messages.Player> players_ = new pbc::RepeatedField<global::Messages.Player>();
    /// <summary>
    /// Player profiles on this roster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Roster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Roster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Roster other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A 'hard' filter to apply to the player pool.
  /// </summary>
  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      name_ = other.name_;
      attribute_ = other.attribute_;
      maxv_ = other.maxv_;
      minv_ = other.minv_;
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Arbitrary developer-chosen, human-readable name of this filter. Appears in logs and metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private string attribute_ = "";
    /// <summary>
    /// Name of the player attribute this filter operates on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attribute {
      get { return attribute_; }
      set {
        attribute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxv" field.</summary>
    public const int MaxvFieldNumber = 3;
    private long maxv_;
    /// <summary>
    /// Maximum value.  Defaults to positive infinity (any value above minv).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Maxv {
      get { return maxv_; }
      set {
        maxv_ = value;
      }
    }

    /// <summary>Field number for the "minv" field.</summary>
    public const int MinvFieldNumber = 4;
    private long minv_;
    /// <summary>
    /// Minimum value.  Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Minv {
      get { return minv_; }
      set {
        minv_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 5;
    private global::Messages.Stats stats_;
    /// <summary>
    /// Statistics for the last time the filter was applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Stats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Attribute != other.Attribute) return false;
      if (Maxv != other.Maxv) return false;
      if (Minv != other.Minv) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Attribute.Length != 0) hash ^= Attribute.GetHashCode();
      if (Maxv != 0L) hash ^= Maxv.GetHashCode();
      if (Minv != 0L) hash ^= Minv.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Attribute.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Attribute);
      }
      if (Maxv != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Maxv);
      }
      if (Minv != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Minv);
      }
      if (stats_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Attribute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attribute);
      }
      if (Maxv != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Maxv);
      }
      if (Minv != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Minv);
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Attribute.Length != 0) {
        Attribute = other.Attribute;
      }
      if (other.Maxv != 0L) {
        Maxv = other.Maxv;
      }
      if (other.Minv != 0L) {
        Minv = other.Minv;
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::Messages.Stats();
        }
        Stats.MergeFrom(other.Stats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Attribute = input.ReadString();
            break;
          }
          case 24: {
            Maxv = input.ReadInt64();
            break;
          }
          case 32: {
            Minv = input.ReadInt64();
            break;
          }
          case 42: {
            if (stats_ == null) {
              stats_ = new global::Messages.Stats();
            }
            input.ReadMessage(stats_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Holds statistics
  /// </summary>
  public sealed partial class Stats : pb::IMessage<Stats> {
    private static readonly pb::MessageParser<Stats> _parser = new pb::MessageParser<Stats>(() => new Stats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats(Stats other) : this() {
      count_ = other.count_;
      elapsed_ = other.elapsed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats Clone() {
      return new Stats(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private long count_;
    /// <summary>
    /// Number of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "elapsed" field.</summary>
    public const int ElapsedFieldNumber = 2;
    private double elapsed_;
    /// <summary>
    /// How long it took to get the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Elapsed {
      get { return elapsed_; }
      set {
        elapsed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Elapsed, other.Elapsed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (Elapsed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Elapsed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Count);
      }
      if (Elapsed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Elapsed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Elapsed != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stats other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.Elapsed != 0D) {
        Elapsed = other.Elapsed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt64();
            break;
          }
          case 17: {
            Elapsed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PlayerPools are defined by a set of 'hard' filters, and can be filled in
  /// with the players that match those filters.
  ///
  /// PlayerPools contain a number of fields, but many gRPC calls that take a
  /// PlayerPool as input only require a few of them to be filled in.  Check the
  /// gRPC function in question for more details.
  /// </summary>
  public sealed partial class PlayerPool : pb::IMessage<PlayerPool> {
    private static readonly pb::MessageParser<PlayerPool> _parser = new pb::MessageParser<PlayerPool>(() => new PlayerPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool(PlayerPool other) : this() {
      name_ = other.name_;
      filters_ = other.filters_.Clone();
      roster_ = other.roster_ != null ? other.roster_.Clone() : null;
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool Clone() {
      return new PlayerPool(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Arbitrary developer-chosen, human-readable string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Messages.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(18, global::Messages.Filter.Parser);
    private readonly pbc::RepeatedField<global::Messages.Filter> filters_ = new pbc::RepeatedField<global::Messages.Filter>();
    /// <summary>
    /// Filters are logical AND-ed (a player must match every filter).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Filter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "roster" field.</summary>
    public const int RosterFieldNumber = 3;
    private global::Messages.Roster roster_;
    /// <summary>
    /// Roster of players that match all filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Roster Roster {
      get { return roster_; }
      set {
        roster_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 4;
    private global::Messages.Stats stats_;
    /// <summary>
    /// Statisticss for the last time this Pool was retrieved from state storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Stats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if (!object.Equals(Roster, other.Roster)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (roster_ != null) hash ^= Roster.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (roster_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Roster);
      }
      if (stats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (roster_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roster);
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPool other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      filters_.Add(other.filters_);
      if (other.roster_ != null) {
        if (roster_ == null) {
          roster_ = new global::Messages.Roster();
        }
        Roster.MergeFrom(other.Roster);
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::Messages.Stats();
        }
        Stats.MergeFrom(other.Stats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 26: {
            if (roster_ == null) {
              roster_ = new global::Messages.Roster();
            }
            input.ReadMessage(roster_);
            break;
          }
          case 34: {
            if (stats_ == null) {
              stats_ = new global::Messages.Stats();
            }
            input.ReadMessage(stats_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Open Match's internal representation and wire protocol format for "Players".
  /// In order to enter matchmaking using the Frontend API, your client code should generate
  /// a consistent (same result for each client every time they launch) with an ID and
  /// properties filled in (for more details about valid values for these fields,
  /// see the documentation).
  /// Players contain a number of fields, but the gRPC calls that take a
  /// Player as input only require a few of them to be filled in.  Check the
  /// gRPC function in question for more details.
  /// </summary>
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      properties_ = other.properties_;
      pool_ = other.pool_;
      attributes_ = other.attributes_.Clone();
      assignment_ = other.assignment_;
      status_ = other.status_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// By convention, an Xid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private string properties_ = "";
    /// <summary>
    /// By convention, a JSON-encoded string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Properties {
      get { return properties_; }
      set {
        properties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 3;
    private string pool_ = "";
    /// <summary>
    /// Optionally used to specify the PlayerPool in which to find a player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pool {
      get { return pool_; }
      set {
        pool_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Messages.Player.Types.Attribute> _repeated_attributes_codec
        = pb::FieldCodec.ForMessage(34, global::Messages.Player.Types.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Messages.Player.Types.Attribute> attributes_ = new pbc::RepeatedField<global::Messages.Player.Types.Attribute>();
    /// <summary>
    /// Attributes of this player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Player.Types.Attribute> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "assignment" field.</summary>
    public const int AssignmentFieldNumber = 5;
    private string assignment_ = "";
    /// <summary>
    /// By convention, ip:port of a DGS to connect to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Assignment {
      get { return assignment_; }
      set {
        assignment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private string status_ = "";
    /// <summary>
    /// Arbitrary developer-chosen string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 7;
    private string error_ = "";
    /// <summary>
    /// Arbitrary developer-chosen string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Properties != other.Properties) return false;
      if (Pool != other.Pool) return false;
      if(!attributes_.Equals(other.attributes_)) return false;
      if (Assignment != other.Assignment) return false;
      if (Status != other.Status) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Properties.Length != 0) hash ^= Properties.GetHashCode();
      if (Pool.Length != 0) hash ^= Pool.GetHashCode();
      hash ^= attributes_.GetHashCode();
      if (Assignment.Length != 0) hash ^= Assignment.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Properties.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Properties);
      }
      if (Pool.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Pool);
      }
      attributes_.WriteTo(output, _repeated_attributes_codec);
      if (Assignment.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Assignment);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Status);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Properties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Properties);
      }
      if (Pool.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pool);
      }
      size += attributes_.CalculateSize(_repeated_attributes_codec);
      if (Assignment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Assignment);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Properties.Length != 0) {
        Properties = other.Properties;
      }
      if (other.Pool.Length != 0) {
        Pool = other.Pool;
      }
      attributes_.Add(other.attributes_);
      if (other.Assignment.Length != 0) {
        Assignment = other.Assignment;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Properties = input.ReadString();
            break;
          }
          case 26: {
            Pool = input.ReadString();
            break;
          }
          case 34: {
            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
            break;
          }
          case 42: {
            Assignment = input.ReadString();
            break;
          }
          case 50: {
            Status = input.ReadString();
            break;
          }
          case 58: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Player message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Attribute : pb::IMessage<Attribute> {
        private static readonly pb::MessageParser<Attribute> _parser = new pb::MessageParser<Attribute>(() => new Attribute());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attribute> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Messages.Player.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute(Attribute other) : this() {
          name_ = other.name_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute Clone() {
          return new Attribute(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// Name should match a Filter.attribute field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private long value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attribute);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attribute other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Value != 0L) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Value != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Value != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attribute other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Value != 0L) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Value = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// IlInput is an empty message reserved for future use.
  /// </summary>
  public sealed partial class IlInput : pb::IMessage<IlInput> {
    private static readonly pb::MessageParser<IlInput> _parser = new pb::MessageParser<IlInput>(() => new IlInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IlInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IlInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IlInput(IlInput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IlInput Clone() {
      return new IlInput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IlInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IlInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IlInput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Assignments : pb::IMessage<Assignments> {
    private static readonly pb::MessageParser<Assignments> _parser = new pb::MessageParser<Assignments>(() => new Assignments());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Assignments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignments(Assignments other) : this() {
      rosters_ = other.rosters_.Clone();
      assignment_ = other.assignment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignments Clone() {
      return new Assignments(this);
    }

    /// <summary>Field number for the "rosters" field.</summary>
    public const int RostersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Messages.Roster> _repeated_rosters_codec
        = pb::FieldCodec.ForMessage(10, global::Messages.Roster.Parser);
    private readonly pbc::RepeatedField<global::Messages.Roster> rosters_ = new pbc::RepeatedField<global::Messages.Roster>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Roster> Rosters {
      get { return rosters_; }
    }

    /// <summary>Field number for the "assignment" field.</summary>
    public const int AssignmentFieldNumber = 10;
    private string assignment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Assignment {
      get { return assignment_; }
      set {
        assignment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Assignments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Assignments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rosters_.Equals(other.rosters_)) return false;
      if (Assignment != other.Assignment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rosters_.GetHashCode();
      if (Assignment.Length != 0) hash ^= Assignment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rosters_.WriteTo(output, _repeated_rosters_codec);
      if (Assignment.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Assignment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rosters_.CalculateSize(_repeated_rosters_codec);
      if (Assignment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Assignment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Assignments other) {
      if (other == null) {
        return;
      }
      rosters_.Add(other.rosters_);
      if (other.Assignment.Length != 0) {
        Assignment = other.Assignment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rosters_.AddEntriesFrom(input, _repeated_rosters_codec);
            break;
          }
          case 82: {
            Assignment = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
